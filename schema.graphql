# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

"Represents User or ArtificialUser"
union MemberUnion = ArtificialUser | User

type ArtificialUser {
  createdAt: ISO8601DateTime!
  creator: User!
  firstName: String!
  id: ID!
  lastName: String!
  updatedAt: ISO8601DateTime!
}

"Autogenerated return type of EmailSignInMutation"
type EmailSignInMutationPayload {
  authToken: String!
  user: User!
}

type Expense {
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  name: String!
  partakers: [Partaker!]!
  price: String!
  priceCurrency: String!
  trip: Trip!
  updatedAt: ISO8601DateTime!
}

type Mutation {
  createExpense(description: String, name: String!, price: Float!, priceCurrency: String, tripId: ID!): Expense
  createTrip(description: String, finishDate: ISO8601DateTime, name: String!, startDate: ISO8601DateTime): Trip
  destroyExpense(id: ID!): Expense
  destroyTrip(id: ID!): Trip
  emailSignIn(email: String!, password: String!): EmailSignInMutationPayload
  emailSignUp(email: String!, firstName: String!, lastName: String!, password: String!, passwordConfirmation: String!): User
  updateExpense(description: String, id: ID!, name: String, price: Float, priceCurrency: String, tripId: ID): Expense
  updateTrip(creatorId: ID, description: String, finishDate: ISO8601DateTime, id: ID!, name: String, startDate: ISO8601DateTime): Trip
}

type Partaker {
  createdAt: ISO8601DateTime!
  expense: Expense!
  id: ID!
  member: MemberUnion!
  paymentPrice: String
  paymentPriceCurrency: String
  updatedAt: ISO8601DateTime!
}

type Query {
  "Returns a user based on auth token"
  currentUser: User!
  "Returns a single Expense by id"
  expense(id: ID!): Expense!
  "Returns a list of all expenses"
  expenses: [Expense!]!
  "Returns a single Trip by id"
  trip(id: ID!): Trip!
  "Returns a list of all trips"
  trips: [Trip!]!
  "Returns a single User by id"
  user(id: ID!): User!
  "Returns a list of users in the easy trip"
  users: [User!]!
}

type Trip {
  createdAt: ISO8601DateTime!
  creator: User!
  description: String
  expenses: [Expense!]!
  finishDate: ISO8601DateTime
  id: ID!
  name: String!
  startDate: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

type User {
  createdAt: ISO8601DateTime!
  currentSignInAt: ISO8601DateTime
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  lastSignInAt: ISO8601DateTime
  signInCount: Int!
  trips: [Trip!]!
  updatedAt: ISO8601DateTime!
}


"An ISO 8601-encoded datetime"
scalar ISO8601DateTime
